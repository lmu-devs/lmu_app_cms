name: Deploy to Staging

on:
  push:
    branches:
      - staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        run: |
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push Directus image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}/lmu-app-cms:staging
          build-args: |
            BUILD_ENV=staging
            BUILD_DATE=${{ steps.meta.outputs.build_date }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ vars.HOST }} -T 60 >> ~/.ssh/known_hosts || echo "Failed to scan host key"

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging server..."
          # Create deployment directory if it doesn't exist
          ssh ${{ secrets.USER }}@${{ vars.HOST }} "mkdir -p ${{ vars.APP_PATH }}"

          # Clean up dangling images before deployment
          ssh ${{ secrets.USER }}@${{ vars.HOST }} "docker image prune -f"

          # Copy compose and env files
          scp compose.yml ${{ secrets.USER }}@${{ vars.HOST }}:${{ vars.APP_PATH }}/compose.yml

          # Deploy using Docker Compose with the custom image
          ssh ${{ secrets.USER }}@${{ vars.HOST }} "cd ${{ vars.APP_PATH }} && \
          echo 'Pulling latest images...' && \
          export ENVIRONMENT=staging && \
          export DOCKER_USERNAME=${{ vars.DOCKER_USERNAME }} && \
          docker compose pull && \
          echo 'Bringing up services...' && \
          docker compose up -d --force-recreate db directus"

      - name: Notify deployment success
        if: success()
        run: echo "Deployment to staging successful"
