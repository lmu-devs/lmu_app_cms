name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Pull and retag Docker CMS image for production
        run: |
          # Pull the staging image
          docker pull ${{ vars.DOCKER_USERNAME }}/lmu-app-cms:staging

          # Tag it for production
          docker tag ${{ vars.DOCKER_USERNAME }}/lmu-app-cms:staging ${{ vars.DOCKER_USERNAME }}/lmu-app-cms:production

          # Push the production tag
          docker push ${{ vars.DOCKER_USERNAME }}/lmu-app-cms:production

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ vars.HOST }} -T 60 >> ~/.ssh/known_hosts || echo "Failed to scan host key"

      - name: Deploy to production server
        run: |
          echo "Deploying to production server..."
          # Create deployment directory if it doesn't exist
          ssh ${{ secrets.USER }}@${{ vars.HOST }} "mkdir -p ${{ vars.APP_PATH }}"

          # Clean up dangling images before deployment
          ssh ${{ secrets.USER }}@${{ vars.HOST }} "docker image prune -f"

          # Copy compose and env files
          scp compose.yml ${{ secrets.USER }}@${{ vars.HOST }}:${{ vars.APP_PATH }}/compose.yml

          # Deploy using Docker Compose with the custom image
          ssh ${{ secrets.USER }}@${{ vars.HOST }} "cd ${{ vars.APP_PATH }} && \
          echo 'Pulling latest images...' && \
          export ENVIRONMENT=production && \
          export DOCKER_USERNAME=${{ vars.DOCKER_USERNAME }} && \
          docker compose pull && \
          echo 'Bringing up services...' && \
          docker compose up -d --force-recreate db directus"

      - name: Notify deployment success
        if: success()
        run: echo "Deployment to production successful"
